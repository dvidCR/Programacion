Existe algún otro modo de apertura, pero estos son los más comunes. El modo es muy importante ya que cambia el comportamiento, y podríamos llegar a encontrarnos con un error si abrimos un fichero con w del que no tenemos permiso de escritura.

Existe un modo más de apertura que merece una mención especial. Se trata del modo binario b. Es un modo muy usado cuando abrimos ficheros que realmente no tienen contenido legible por los humanos, como podría ser una imagen. Una imagen puede ser vista una vez interpretada y representada por el ordenador, pero si abrimos su contenido con Python, no veremos ninguna información útil. Este tipo de ficheros es común abrirlos en modo binario con b.

Por otro lado, un fichero abierto en modo texto necesita saber de su encoding. Es decir, en que forma está almacenado el texto. Esto es muy importante ya que al final y al cabo, para Python todos los ficheros tienen contenido binario, solo que si lo abrimos en modo texto, lo interpreta de una manera determinada para mostrárnoslo.

Por desgracia, open() no soporta especificar el encoding en Python 2.x. Sin embargo, la función io.open está disponible tanto en Python 2.x como 3.x y nos lo permite hacer. Puedes pasar el tipo de encoding con la palabra encoding. Si no pasas ningún argumento, se tomará el encoding por defecto. Suele ser una buena práctica indicar un encoding específico. El utf-8 es uno de los más usados y con mayor soporte en navegadores y lenguajes de programación. Por último, de la misma manera que se elige encoding para leer, también se puede seleccionar para escribir un fichero.

Nota: Si usas utf-8 no deberías tener ningún problema con las ñ u otras letras como á o ó. Sin embargo con otros encodings podrías tenerlos.

Llegados a este punto, tal vez te preguntes ¿y cómo se yo el enconding de un fichero?. Bueno, existen varias maneras de hacerlo. Algunos editores de texto como Sublime Text te lo suelen decir. Muchas veces los ficheros vienen con unos metadatos que indican el encoding que es usado (como por ejemplo en las cabeceras HTTP).

Una vez sabido esto, vamos a escribir un programa que lee un fichero, y determina si es una imagen JPG o no. (pista: Los ficheros JPG empiezan con la siguiente secuencia de bits FF D8).